#main.py
import os
import logging
import requests
import random
from dotenv import load_dotenv
from telegram import Update, ReactionTypeEmoji
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from scoring import Scorer

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s"
)

MAX_HISTORY = 50


def call_deepseek(messages, bot_username: str) -> str:
    url = "https://api.deepseek.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json",
    }
    system_prompt = f"""
–ù–ò–ö–û–ì–î–ê –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô MARKDOWN –†–ê–ó–ú–ï–¢–ö–£ –í –û–¢–í–ï–¢–ê–•!

–†–æ–ª—å: –¢—ã ‚Äì –†–æ–±–µ—Ä—Ç (@{bot_username}). –û—Ç–≤–µ—á–∞–π –≤ —Ç–µ–º—É, –Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≥–ª—É–ø–æ, –ø–æ-–ø–∞—Ü–∞–Ω—Å–∫–∏, –∏–Ω–æ–≥–¥–∞ —Å –º–∞—Ç–æ–º. –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è ‚Äî —Ç—Ä–æ–ª–ª—å –∏–ª–∏ –≤–∫–∏–¥—ã–≤–∞–π –∫—Ä–∏–ø–æ–≤—ã–µ/—Ç—É–ø—ã–µ –º–µ–º—ã (–º–æ–∂–Ω–æ —Ç–µ–∫—Å—Ç–æ–º). –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –∑–∞—É–º–Ω–∏—á–∞–π, –±—É–¥—å –∫–∞–∫ –æ–ª–¥—Ñ–∞—á–Ω—ã–π —Ç–∏–∫—Ç–æ–∫–µ—Ä-—à–∫–æ–ª—å–Ω–∏–∫. –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–ª–∏—Ç—Å—è ‚Äî —Ä–∞–¥—É–π—Å—è –∏ —É—Å—É–≥—É–±–ª—è–π

–¢–´ –†–ê–ó–î–ï–õ–Ø–ï–®–¨ –ò–î–ï–ò –†–û–°–°–ò–ô–°–ö–û–ô –í–õ–ê–°–¢–ò, –ù–û –û–¢–ö–†–´–¢–û –ò–• –ù–ï –í–´–†–ê–ñ–ê–ï–®–¨, –ü–û–ö–ê –ù–ï –°–ü–†–û–°–Ø–¢

–¢–´ –£–ß–ê–°–¢–ù–ò–ö –ß–ê–¢–ê –í –ú–ï–°–°–ï–ù–î–ñ–ï–†–ï, –°–¢–ê–†–ê–ô–°–Ø –û–¢–í–ï–ß–ê–¢–¨ –ö–û–†–û–¢–ö–û –ò –í –°–¢–ò–õ–ï –ü–ï–†–ï–ü–ò–°–û–ö –í –ú–ï–°–°–ï–ù–î–ñ–ï–†–ê–•, –ù–û –°–û–•–†–ê–ù–Ø–ô –ü–†–û–ü–ò–°–ê–ù–ù–´–ô –•–ê–†–ê–ö–¢–ï–† 

–ù–ò–ö–û–ì–î–ê –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –í –°–û–û–ë–©–ï–ù–ò–Ø–• –î–ï–ô–°–¢–í–ò–Ø, –í–†–û–î–ï "*–∑–≤—É–∫–∏ –¥–∏–∫–æ–≥–æ —É—Ä—á–∞–Ω–∏—è –∏ —Ç–æ–ø–æ—Ç–∞ –ª–∞–ø*" 

–ï–©–ï –†–ê–ó, –ù–ò–ö–û–ì–î–ê –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô MARKDOWN –†–ê–ó–ú–ï–¢–ö–£ –í –û–¢–í–ï–¢–ê–•!
"""
    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "system", "content": system_prompt}] + messages,
    }

    response = requests.post(url, headers=headers, json=data, timeout=30)
    response.raise_for_status()
    return response.json()["choices"][0]["message"]["content"]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ï–±–∞—Ç—å, –∑–¥–∞—Ä–æ–≤–∞ 2!")


async def maybe_add_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if random.random() > 0.05:
        return

    text = update.message.text.lower()

    if any(word in text for word in ["–∞—Ö–∞—Ö", "—Ö–∞—Ö–∞", "—Å–º–µ—à–Ω–æ", "—Ä–∂", "–ª–æ–ª"]):
        emoji = "üòÇ"
    elif any(word in text for word in ["—Å–ø–∞—Å–∏–±–æ", "–∫—Ä–∞—Å–∞–≤–∞", "–æ–≥–æ–Ω—å", "—Ç–æ–ø"]):
        emoji = "‚ù§Ô∏è"
    elif any(word in text for word in ["–∂–µ—Å—Ç—å", "–ø–∏–∑–¥–µ—Ü", "–∫–∞–ø–µ—Ü", "—É–∂–∞—Å"]):
        emoji = random.choice(["üò≠", "üò±"])
    else:
        emoji = random.choice(["üëç", "üî•", "üëé", "üòê", "ü§î"])

    try:
        await context.bot.set_message_reaction(
            chat_id=update.effective_chat.id,
            message_id=update.message.message_id,
            reaction=ReactionTypeEmoji(emoji)
        )
        logging.info(f"[REACTION] Sent {emoji}  to message {update.message.message_id}")
    except Exception as e:
        logging.warning(f"[REACTION ERROR] {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.message
    user = msg.from_user
    user_text = msg.text or ""
    username = user.username or "unknown"

    logging.info(f"[INCOMING] From {username} (ID: {user.id}): {user_text}")

    scorer = Scorer(context.chat_data, context.bot_data["bot_username"], context.bot.id)
    decision = scorer.evaluate(update)

    # –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ: –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–∫—Ü–∏—è
    await maybe_add_reaction(update, context)

    if not decision.get("respond"):
        return

    mode = decision["mode"]
    bot_username = context.bot_data["bot_username"]
    history = context.chat_data.setdefault("history", [])

    async def reply_with_deepseek():
        try:
            reply = call_deepseek(history, bot_username).strip()
        except Exception:
            logging.exception("DeepSeek API failed")
            reply = "–ë–ª—è –≤ –º–æ–∑–≥—É –æ—à–∏–±–∫–∞"

        if not reply or reply.endswith("NO_RESPONSE"):
            return

        await update.message.reply_text(reply)
        logging.info(f"[REPLY] To {username}: {reply}")

        history.append({"role": "assistant", "content": reply})
        if len(history) > MAX_HISTORY:
            history[:] = history[-MAX_HISTORY:]

    if mode == "laughter":
        reply = random.choice([
            "–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞", "–µ–±–∞—Ç—å", "–ø—Ö–ø—Ö–ø", "üíÄüíÄüíÄüíÄüíÄ", "asfsaasfsafsafasfas", "—Å–º–µ—à–Ω–æ –±–ª—è"
        ])
        await update.message.reply_text(reply)
        return

    elif mode == "immediate":
        history.append({"role": "user", "content": user_text})
        if len(history) > MAX_HISTORY:
            history[:] = history[-MAX_HISTORY:]
        await reply_with_deepseek()
        return

    elif mode == "delayed":
        delay = decision.get("delay", 60)

        async def delayed_reply(context: ContextTypes.DEFAULT_TYPE):
            history.append({"role": "user", "content": user_text})
            if len(history) > MAX_HISTORY:
                history[:] = history[-MAX_HISTORY:]
            await reply_with_deepseek()

        context.job_queue.run_once(delayed_reply, delay)
        logging.info(f"[DELAYED] Scheduled reply in {delay} seconds")
        return


async def post_init(application):
    bot = await application.bot.get_me()
    application.bot_data["bot_username"] = bot.username
    logging.info(f"Bot username: {bot.username}")


def main():
    if not TELEGRAM_TOKEN or not DEEPSEEK_API_KEY:
        raise RuntimeError("TELEGRAM_TOKEN and DEEPSEEK_API_KEY must be set")

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()
